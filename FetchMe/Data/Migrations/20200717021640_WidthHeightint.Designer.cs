// <auto-generated />
using System;
using FetchMe.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FetchMe.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200717021640_WidthHeightint")]
    partial class WidthHeightint
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FetchMe.Models.BidModels.Bid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DepositAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("DepositAmountDue")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeePercent")
                        .HasColumnType("int");

                    b.Property<decimal>("FullAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("FullAmountDue")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GigId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<Guid>("PhotographerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GigId");

                    b.HasIndex("MessageId")
                        .IsUnique();

                    b.HasIndex("PhotographerId");

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("FetchMe.Models.DateTimeSpanModels.DateTimeSpan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DateTimeSpans");
                });

            modelBuilder.Entity("FetchMe.Models.GigDateTimeModels.GigDateTime", b =>
                {
                    b.Property<Guid>("GigId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DateTimeSpanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GigId", "DateTimeSpanId");

                    b.HasIndex("DateTimeSpanId");

                    b.ToTable("GigDateTimes");
                });

            modelBuilder.Entity("FetchMe.Models.GigDateTimeTypeModels.GigDateTimeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GigDateTimeTypes");
                });

            modelBuilder.Entity("FetchMe.Models.GigLocationModels.GigLocation", b =>
                {
                    b.Property<Guid>("GigId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GigId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("GigLocations");
                });

            modelBuilder.Entity("FetchMe.Models.GigLocationTypeModels.GigLocationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GigLocationTypes");
                });

            modelBuilder.Entity("FetchMe.Models.GigModels.Gig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GigDateTimeTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GigStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("MaxBudget")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("MinBudget")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GigDateTimeTypeId");

                    b.HasIndex("GigStatusId");

                    b.HasIndex("LocationTypeId");

                    b.ToTable("Gig");
                });

            modelBuilder.Entity("FetchMe.Models.GigModels.GigStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ordinal")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GigStatuses");
                });

            modelBuilder.Entity("FetchMe.Models.GigTagModels.GigTag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("GigTags");
                });

            modelBuilder.Entity("FetchMe.Models.GigTagModels.GigTagGig", b =>
                {
                    b.Property<Guid>("GigId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TagId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GigId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("GigTagGigs");
                });

            modelBuilder.Entity("FetchMe.Models.LikeModels.PhotographLike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PhotographId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PhotographId");

                    b.ToTable("PhotographLikes");
                });

            modelBuilder.Entity("FetchMe.Models.LikeModels.PhotographerLike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PhotographerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PhotographerId");

                    b.ToTable("PhotographerLikes");
                });

            modelBuilder.Entity("FetchMe.Models.LocationModels.Location", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdministrativeAreaLevel1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdministrativeAreaLevel2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdministrativeAreaLevel3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormattedAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Lat")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<decimal?>("Lng")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<string>("Locality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Neighborhood")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Political")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Route")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Serviceable")
                        .HasColumnType("bit");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("FetchMe.Models.MessageModels.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("FetchMe.Models.PhotographModels.Photograph", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CameraBodyValue")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExposureTimeValue")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FStopValue")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FocalLengthValue")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("HideFromGallery")
                        .HasColumnType("bit");

                    b.Property<string>("ISOValue")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LHeight")
                        .HasColumnType("int");

                    b.Property<int>("LWidth")
                        .HasColumnType("int");

                    b.Property<string>("LensValue")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LightSourceValue")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MHeight")
                        .HasColumnType("int");

                    b.Property<int>("MWidth")
                        .HasColumnType("int");

                    b.Property<Guid>("PhotographerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SHeight")
                        .HasColumnType("int");

                    b.Property<int>("SWidth")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CameraBodyValue");

                    b.HasIndex("ExposureTimeValue");

                    b.HasIndex("FStopValue");

                    b.HasIndex("FocalLengthValue");

                    b.HasIndex("ISOValue");

                    b.HasIndex("LensValue");

                    b.HasIndex("LightSourceValue");

                    b.HasIndex("LocationId");

                    b.HasIndex("PhotographerId");

                    b.ToTable("Photographs");
                });

            modelBuilder.Entity("FetchMe.Models.PhotographTagModels.PhotographTag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PhotographTag");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PhotographTag");
                });

            modelBuilder.Entity("FetchMe.Models.PhotographTagModels.PhotographTags", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("PhotographTags");
                });

            modelBuilder.Entity("FetchMe.Models.PhotographTagModels.PhotographTagsPhotograph", b =>
                {
                    b.Property<Guid>("PhotographId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhotographTagId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PhotographId", "PhotographTagId");

                    b.HasIndex("PhotographTagId");

                    b.ToTable("PhotographTagsPhotographs");
                });

            modelBuilder.Entity("FetchMe.Models.PhotographerBadgeModels.Badge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BadgeClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Graphic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Badges");
                });

            modelBuilder.Entity("FetchMe.Models.PhotographerBadgeModels.PhotographerBadge", b =>
                {
                    b.Property<Guid>("PhotographerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BadgeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PhotographerId", "BadgeId");

                    b.HasIndex("BadgeId");

                    b.ToTable("PhotographerBadges");
                });

            modelBuilder.Entity("FetchMe.Models.PhotographerLocationModels.PhotographerLocation", b =>
                {
                    b.Property<Guid>("PhotographerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PhotographerId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("PhotographerLocations");
                });

            modelBuilder.Entity("FetchMe.Models.PhotographerModels.Photographer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BannerImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CardExcerpt")
                        .HasColumnType("nvarchar(280)")
                        .HasMaxLength(280);

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsInsured")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LogoImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pinterest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileBio")
                        .HasColumnType("nvarchar(3000)")
                        .HasMaxLength(3000);

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Tumblr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebSite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("YearStarted")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BannerImageId");

                    b.HasIndex("LogoImageId");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasFilter("[Slug] IS NOT NULL");

                    b.ToTable("Photographers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "f486ace3-7532-4df0-867a-128f07c55713",
                            ConcurrencyStamp = "sajkdhjkhasfu",
                            Name = "Photographer",
                            NormalizedName = "PHOTOGRAPHER"
                        },
                        new
                        {
                            Id = "4e52af71-092c-4f12-a2e5-feb18b274606",
                            ConcurrencyStamp = "sajdfejkhasfu",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FetchMe.Models.CameraBodyModels.CameraBody", b =>
                {
                    b.HasBaseType("FetchMe.Models.PhotographTagModels.PhotographTag");

                    b.HasDiscriminator().HasValue("CameraBody");
                });

            modelBuilder.Entity("FetchMe.Models.ExposureTimeModels.ExposureTime", b =>
                {
                    b.HasBaseType("FetchMe.Models.PhotographTagModels.PhotographTag");

                    b.HasDiscriminator().HasValue("ExposureTime");
                });

            modelBuilder.Entity("FetchMe.Models.FStopModels.FStop", b =>
                {
                    b.HasBaseType("FetchMe.Models.PhotographTagModels.PhotographTag");

                    b.HasDiscriminator().HasValue("FStop");
                });

            modelBuilder.Entity("FetchMe.Models.FocalLengthModels.FocalLength", b =>
                {
                    b.HasBaseType("FetchMe.Models.PhotographTagModels.PhotographTag");

                    b.HasDiscriminator().HasValue("FocalLength");
                });

            modelBuilder.Entity("FetchMe.Models.ISOModels.ISO", b =>
                {
                    b.HasBaseType("FetchMe.Models.PhotographTagModels.PhotographTag");

                    b.HasDiscriminator().HasValue("ISO");
                });

            modelBuilder.Entity("FetchMe.Models.LensModels.Lens", b =>
                {
                    b.HasBaseType("FetchMe.Models.PhotographTagModels.PhotographTag");

                    b.HasDiscriminator().HasValue("Lens");
                });

            modelBuilder.Entity("FetchMe.Models.LightSourceModels.LightSource", b =>
                {
                    b.HasBaseType("FetchMe.Models.PhotographTagModels.PhotographTag");

                    b.HasDiscriminator().HasValue("LightSource");
                });

            modelBuilder.Entity("FetchMe.Models.BidModels.Bid", b =>
                {
                    b.HasOne("FetchMe.Models.GigModels.Gig", "Gig")
                        .WithMany("Bids")
                        .HasForeignKey("GigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FetchMe.Models.MessageModels.Message", "Message")
                        .WithOne("Bid")
                        .HasForeignKey("FetchMe.Models.BidModels.Bid", "MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FetchMe.Models.PhotographerModels.Photographer", "Photographer")
                        .WithMany("Bids")
                        .HasForeignKey("PhotographerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FetchMe.Models.GigDateTimeModels.GigDateTime", b =>
                {
                    b.HasOne("FetchMe.Models.DateTimeSpanModels.DateTimeSpan", "DateTimeSpan")
                        .WithMany("GigDateTimes")
                        .HasForeignKey("DateTimeSpanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FetchMe.Models.GigModels.Gig", "Gig")
                        .WithMany("GigDateTimes")
                        .HasForeignKey("GigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FetchMe.Models.GigLocationModels.GigLocation", b =>
                {
                    b.HasOne("FetchMe.Models.GigModels.Gig", "Gig")
                        .WithMany("Locations")
                        .HasForeignKey("GigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FetchMe.Models.LocationModels.Location", "Location")
                        .WithMany("Gigs")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FetchMe.Models.GigModels.Gig", b =>
                {
                    b.HasOne("FetchMe.Models.GigDateTimeTypeModels.GigDateTimeType", "GigDateTimeType")
                        .WithMany("Gigs")
                        .HasForeignKey("GigDateTimeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FetchMe.Models.GigModels.GigStatus", "GigStatus")
                        .WithMany("Gigs")
                        .HasForeignKey("GigStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FetchMe.Models.GigLocationTypeModels.GigLocationType", "LocationType")
                        .WithMany("Gigs")
                        .HasForeignKey("LocationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FetchMe.Models.GigTagModels.GigTagGig", b =>
                {
                    b.HasOne("FetchMe.Models.GigModels.Gig", "Gig")
                        .WithMany("Tags")
                        .HasForeignKey("GigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FetchMe.Models.GigTagModels.GigTag", "Tag")
                        .WithMany("Gigs")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FetchMe.Models.LikeModels.PhotographLike", b =>
                {
                    b.HasOne("FetchMe.Models.PhotographModels.Photograph", "Photograph")
                        .WithMany("PhotographLikes")
                        .HasForeignKey("PhotographId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FetchMe.Models.LikeModels.PhotographerLike", b =>
                {
                    b.HasOne("FetchMe.Models.PhotographerModels.Photographer", "Photographer")
                        .WithMany("PhotographerLikes")
                        .HasForeignKey("PhotographerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FetchMe.Models.PhotographModels.Photograph", b =>
                {
                    b.HasOne("FetchMe.Models.CameraBodyModels.CameraBody", "CameraBody")
                        .WithMany("Photographs")
                        .HasForeignKey("CameraBodyValue");

                    b.HasOne("FetchMe.Models.ExposureTimeModels.ExposureTime", "ExposureTime")
                        .WithMany("Photographs")
                        .HasForeignKey("ExposureTimeValue");

                    b.HasOne("FetchMe.Models.FStopModels.FStop", "FStop")
                        .WithMany("Photographs")
                        .HasForeignKey("FStopValue");

                    b.HasOne("FetchMe.Models.FocalLengthModels.FocalLength", "FocalLength")
                        .WithMany("Photographs")
                        .HasForeignKey("FocalLengthValue");

                    b.HasOne("FetchMe.Models.ISOModels.ISO", "ISO")
                        .WithMany("Photographs")
                        .HasForeignKey("ISOValue");

                    b.HasOne("FetchMe.Models.LensModels.Lens", "Lens")
                        .WithMany("Photographs")
                        .HasForeignKey("LensValue");

                    b.HasOne("FetchMe.Models.LightSourceModels.LightSource", "LightSource")
                        .WithMany("Photographs")
                        .HasForeignKey("LightSourceValue");

                    b.HasOne("FetchMe.Models.LocationModels.Location", "Location")
                        .WithMany("Photographs")
                        .HasForeignKey("LocationId");

                    b.HasOne("FetchMe.Models.PhotographerModels.Photographer", "Photographer")
                        .WithMany("Photographs")
                        .HasForeignKey("PhotographerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FetchMe.Models.PhotographTagModels.PhotographTagsPhotograph", b =>
                {
                    b.HasOne("FetchMe.Models.PhotographModels.Photograph", "Photograph")
                        .WithMany("PhotographTags")
                        .HasForeignKey("PhotographId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FetchMe.Models.PhotographTagModels.PhotographTags", "PhotographTag")
                        .WithMany("TagPhotographs")
                        .HasForeignKey("PhotographTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FetchMe.Models.PhotographerBadgeModels.PhotographerBadge", b =>
                {
                    b.HasOne("FetchMe.Models.PhotographerBadgeModels.Badge", "Badge")
                        .WithMany("PhotographerBadges")
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FetchMe.Models.PhotographerModels.Photographer", "Photographer")
                        .WithMany("PhotographerBadges")
                        .HasForeignKey("PhotographerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FetchMe.Models.PhotographerLocationModels.PhotographerLocation", b =>
                {
                    b.HasOne("FetchMe.Models.LocationModels.Location", "Location")
                        .WithMany("Photographers")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FetchMe.Models.PhotographerModels.Photographer", "Photographer")
                        .WithMany("Locations")
                        .HasForeignKey("PhotographerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FetchMe.Models.PhotographerModels.Photographer", b =>
                {
                    b.HasOne("FetchMe.Models.PhotographModels.Photograph", "BannerImage")
                        .WithMany()
                        .HasForeignKey("BannerImageId");

                    b.HasOne("FetchMe.Models.PhotographModels.Photograph", "LogoImage")
                        .WithMany()
                        .HasForeignKey("LogoImageId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
